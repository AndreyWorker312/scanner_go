package main

import (
	"bufio"
	"fmt"
	"net"
	"time"
)

func main() {
	fmt.Println("=== Telnet –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===\n")

	// –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç Telnet —Å–µ—Ä–≤–µ—Ä–∞
	host := "telehack.com" // –ü—É–±–ª–∏—á–Ω—ã–π telnet —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤
	port := "23"

	// –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∞–¥—Ä–µ—Å–∞:
	// host := "192.168.1.1"  // –í–∞—à —Ä–æ—É—Ç–µ—Ä
	// host := "localhost"    // –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä

	connectAndReadTelnet(host, port)
}

// connectAndReadTelnet —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Telnet —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —á–∏—Ç–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
func connectAndReadTelnet(host, port string) {
	fmt.Printf("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ %s:%s...\n", host, port)

	// –®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	address := net.JoinHostPort(host, port)
	dialer := &net.Dialer{
		Timeout: 5 * time.Second,
	}

	conn, err := dialer.Dial("tcp", address)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v\n", err)
		fmt.Println("\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–æ—Ä—Ç 23 –æ—Ç–∫—Ä—ã—Ç")
		return
	}
	defer conn.Close()

	fmt.Printf("‚úÖ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n")
	fmt.Printf("   –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: %s\n", conn.LocalAddr())
	fmt.Printf("   –£–¥–∞–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: %s\n\n", conn.RemoteAddr())

	// –®–∞–≥ 2: –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telnet
	readTelnetData(conn)
}

// readTelnetData —á–∏—Ç–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Telnet —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
func readTelnetData(conn net.Conn) {
	fmt.Println("üìñ –ù–∞—á–∏–Ω–∞—é —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ TCP –∫–∞–Ω–∞–ª–∞...\n")

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ —á—Ç–µ–Ω–∏–µ
	conn.SetReadDeadline(time.Now().Add(5 * time.Second))

	// –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π reader –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
	reader := bufio.NewReader(conn)

	// –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
	rawData := make([]byte, 0, 8192)       // –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
	cleanData := make([]byte, 0, 8192)     // –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ IAC)
	iacCommands := []IACCommand{}          // Telnet –∫–æ–º–∞–Ω–¥—ã

	buffer := make([]byte, 1024)
	iteration := 0

	// –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏—è–º–∏
	for {
		iteration++
		n, err := reader.Read(buffer)

		if n > 0 {
			fmt.Printf("üì¶ –ü–æ—Ä—Ü–∏—è #%d: –ø–æ–ª—É—á–µ–Ω–æ %d –±–∞–π—Ç\n", iteration, n)

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
			rawData = append(rawData, buffer[:n]...)

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º hex –¥–∞–º–ø (–ø–µ—Ä–≤—ã–µ 64 –±–∞–π—Ç–∞)
			fmt.Print("   Hex: ")
			displayLimit := min(n, 64)
			for i := 0; i < displayLimit; i++ {
				fmt.Printf("%02X ", buffer[i])
				if (i+1)%16 == 0 {
					fmt.Print("\n        ")
				}
			}
			if n > 64 {
				fmt.Printf("... (+%d –±–∞–π—Ç)", n-64)
			}
			fmt.Println()

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
			processedData, commands := processTelnetBytes(buffer[:n])
			cleanData = append(cleanData, processedData...)
			iacCommands = append(iacCommands, commands...)

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
			if len(processedData) > 0 {
				fmt.Printf("   –¢–µ–∫—Å—Ç: %q\n", string(processedData))
			}

			fmt.Println()
		}

		if err != nil {
			if netErr, ok := err.(net.Error); ok && netErr.Timeout() {
				fmt.Println("‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è (–±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ—Å—Ç—É–ø–∞–µ—Ç)")
			} else {
				fmt.Printf("‚ÑπÔ∏è  –ß—Ç–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: %v\n", err)
			}
			break
		}

		// –ü—Ä–æ–¥–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å
		conn.SetReadDeadline(time.Now().Add(500 * time.Millisecond))
	}

	// –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	printSummary(rawData, cleanData, iacCommands)
}

// IACCommand –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç Telnet IAC –∫–æ–º–∞–Ω–¥—É
type IACCommand struct {
	Command string
	Option  string
	Bytes   []byte
}

// processTelnetBytes –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞–π—Ç—ã –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç IAC –∫–æ–º–∞–Ω–¥—ã
func processTelnetBytes(data []byte) (cleanData []byte, commands []IACCommand) {
	cleanData = make([]byte, 0, len(data))
	commands = []IACCommand{}

	i := 0
	for i < len(data) {
		b := data[i]

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ IAC –∫–æ–º–∞–Ω–¥—É (0xFF)
		if b == 0xFF && i+2 < len(data) {
			cmd := data[i+1]
			opt := data[i+2]

			commands = append(commands, IACCommand{
				Command: getIACCommandName(cmd),
				Option:  getTelnetOptionName(opt),
				Bytes:   []byte{b, cmd, opt},
			})

			i += 3
			continue
		}

		// IAC –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, IAC IAC = —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π 0xFF)
		if b == 0xFF && i+1 < len(data) && data[i+1] == 0xFF {
			cleanData = append(cleanData, 0xFF)
			i += 2
			continue
		}

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–µ—á–∞—Ç–Ω—ã–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã (–∫—Ä–æ–º–µ \n, \r, \t)
		if b >= 32 && b <= 126 || b == '\n' || b == '\r' || b == '\t' {
			cleanData = append(cleanData, b)
		}

		i++
	}

	return cleanData, commands
}

// printSummary –≤—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
func printSummary(rawData, cleanData []byte, commands []IACCommand) {
	fmt.Println("\n" + repeatString("‚ïê", 70))
	fmt.Println("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
	fmt.Println(repeatString("‚ïê", 70))

	fmt.Printf("\nüì¶ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: %d –±–∞–π—Ç —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n", len(rawData))
	fmt.Printf("üìù –û—á–∏—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %d –±–∞–π—Ç\n", len(cleanData))
	fmt.Printf("üîß Telnet IAC –∫–æ–º–∞–Ω–¥: %d\n", len(commands))

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º IAC –∫–æ–º–∞–Ω–¥—ã
	if len(commands) > 0 {
		fmt.Println("\nüîß –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ Telnet IAC –∫–æ–º–∞–Ω–¥—ã:")
		for i, cmd := range commands {
			fmt.Printf("   %d. %s %s [%02X %02X %02X]\n",
				i+1, cmd.Command, cmd.Option,
				cmd.Bytes[0], cmd.Bytes[1], cmd.Bytes[2])
		}
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if len(cleanData) > 0 {
		fmt.Println("\nüì® –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–∞–Ω–Ω–µ—Ä):")
		fmt.Println(repeatString("‚îÄ", 70))
		fmt.Println(string(cleanData))
		fmt.Println(repeatString("‚îÄ", 70))
	}

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø —Å–µ—Ä–≤–µ—Ä–∞
	serverType := identifyTelnetServer(string(cleanData))
	if serverType != "" {
		fmt.Printf("\nüñ•Ô∏è  –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø —Å–µ—Ä–≤–µ—Ä–∞: %s\n", serverType)
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π hex –¥–∞–º–ø —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	if len(rawData) > 0 {
		fmt.Println("\nüìã –ü–æ–ª–Ω—ã–π HEX –¥–∞–º–ø —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
		printHexDump(rawData)
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

// getIACCommandName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è IAC –∫–æ–º–∞–Ω–¥—ã
func getIACCommandName(cmd byte) string {
	commands := map[byte]string{
		0xFF: "IAC",
		0xFE: "DONT",
		0xFD: "DO",
		0xFC: "WONT",
		0xFB: "WILL",
		0xFA: "SB",
		0xF0: "SE",
	}
	if name, ok := commands[cmd]; ok {
		return name
	}
	return fmt.Sprintf("Unknown(0x%02X)", cmd)
}

// getTelnetOptionName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è Telnet –æ–ø—Ü–∏–∏
func getTelnetOptionName(opt byte) string {
	options := map[byte]string{
		0:  "Binary Transmission",
		1:  "Echo",
		3:  "Suppress Go Ahead",
		5:  "Status",
		6:  "Timing Mark",
		24: "Terminal Type",
		31: "Window Size",
		32: "Terminal Speed",
		33: "Remote Flow Control",
		34: "Linemode",
		36: "Environment Variables",
	}
	if name, ok := options[opt]; ok {
		return fmt.Sprintf("%s(0x%02X)", name, opt)
	}
	return fmt.Sprintf("Unknown(0x%02X)", opt)
}

// identifyTelnetServer –ø—ã—Ç–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø Telnet —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –±–∞–Ω–Ω–µ—Ä—É
func identifyTelnetServer(banner string) string {
	bannerLower := ""
	for _, r := range banner {
		if r >= 'A' && r <= 'Z' {
			bannerLower += string(r + 32)
		} else {
			bannerLower += string(r)
		}
	}

	if contains(bannerLower, "ubuntu") {
		return "Ubuntu Linux Telnet"
	}
	if contains(bannerLower, "debian") {
		return "Debian Linux Telnet"
	}
	if contains(bannerLower, "redhat") || contains(bannerLower, "red hat") {
		return "Red Hat Linux Telnet"
	}
	if contains(bannerLower, "centos") {
		return "CentOS Linux Telnet"
	}
	if contains(bannerLower, "freebsd") {
		return "FreeBSD Telnet"
	}
	if contains(bannerLower, "cisco") {
		return "Cisco IOS Telnet"
	}
	if contains(bannerLower, "mikrotik") {
		return "MikroTik RouterOS Telnet"
	}
	if contains(bannerLower, "juniper") {
		return "Juniper JunOS Telnet"
	}
	if contains(bannerLower, "windows") {
		return "Windows Telnet Server"
	}
	if contains(bannerLower, "linux") {
		return "Linux Telnet"
	}

	return ""
}

// printHexDump –≤—ã–≤–æ–¥–∏—Ç hex –¥–∞–º–ø –¥–∞–Ω–Ω—ã—Ö
func printHexDump(data []byte) {
	const bytesPerLine = 16
	for i := 0; i < len(data); i += bytesPerLine {
		// –°–º–µ—â–µ–Ω–∏–µ
		fmt.Printf("   %08X: ", i)

		// Hex –∑–Ω–∞—á–µ–Ω–∏—è
		for j := 0; j < bytesPerLine; j++ {
			if i+j < len(data) {
				fmt.Printf("%02X ", data[i+j])
			} else {
				fmt.Print("   ")
			}
			if j == 7 {
				fmt.Print(" ")
			}
		}

		// ASCII –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
		fmt.Print(" |")
		for j := 0; j < bytesPerLine && i+j < len(data); j++ {
			b := data[i+j]
			if b >= 32 && b <= 126 {
				fmt.Printf("%c", b)
			} else {
				fmt.Print(".")
			}
		}
		fmt.Println("|")

		// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –ø–µ—Ä–≤—ã–º–∏ 256 –±–∞–π—Ç–∞–º–∏
		if i >= 240 && len(data) > 256 {
			fmt.Printf("   ... (–ø–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 256 –±–∞–π—Ç –∏–∑ %d)\n", len(data))
			break
		}
	}
}

// contains –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫—É
func contains(s, substr string) bool {
	return len(s) >= len(substr) && indexOfString(s, substr) >= 0
}

func indexOfString(s, substr string) int {
	for i := 0; i <= len(s)-len(substr); i++ {
		match := true
		for j := 0; j < len(substr); j++ {
			if s[i+j] != substr[j] {
				match = false
				break
			}
		}
		if match {
			return i
		}
	}
	return -1
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

// repeatString –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Å—Ç—Ä–æ–∫—É n —Ä–∞–∑
func repeatString(s string, n int) string {
	result := ""
	for i := 0; i < n; i++ {
		result += s
	}
	return result
}

